/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package leveleditor;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Iterator;
import leveleditor.data.LevelProperties;
import leveleditor.data.Sprite;

/**
 *
 * @author franz
 */
public class PreviewPanel extends javax.swing.JPanel {
    Point center = new Point();
    
    Point mouseStart;
    float scale = 1;
    float gridSize = 50;
    
    private ArrayList<Entity> entities;
    private boolean overEntity;
    private Entity overEntityObj;
    private Entity selectedEntity;
    
    private SelectionChangedListener selectionChangedListener;
    
    private LevelProperties levelProperties = new LevelProperties(1200, 480);
    /**
     * Creates new form PreviewPanel
     */
    public PreviewPanel() {
        initComponents();
        
        entities = Application.get().getEntityHolder().getList();
    }

    @Override
    public void paint(Graphics g) {
        int levelWidth = levelProperties.getWidth(), levelHeight = levelProperties.getHeight();
        Graphics2D g2d = (Graphics2D) g;
        
        int width = g2d.getClipBounds().width;
        int height = g2d.getClipBounds().height;
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setBackground(Color.WHITE);
        g2d.clearRect(0, 0, width, height);
        
        g2d.setColor(new Color(200, 200, 200));
        paintGrid(g2d, width, height);
        
        g2d.setColor(Color.ORANGE);
        g2d.setStroke(new BasicStroke(2));
        Rectangle2D level = new Rectangle2D.Float(center.x * scale, center.y * scale, 
                (levelWidth) * scale, (levelHeight) * scale);
        g2d.draw(level);
        
        g2d.setColor(Color.BLACK);
        Iterator<Entity> i = entities.iterator();
        for (; i.hasNext();) {
            Entity e = i.next();
            e.paint(g2d, center, scale);
        }
        
        g2d.setColor(Color.DARK_GRAY);
        g2d.drawString("Â© 2013 Franz Scherr", getWidth() - 160, getHeight() - 40);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                onWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                onReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onPressed(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                onDrag(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                onMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void onDrag(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onDrag
        float incx = (evt.getX() - mouseStart.x) / scale;
        float incy = (evt.getY() - mouseStart.y) / scale;
        if (! overEntity) {
            center.x += incx;
            center.y += incy;
        } else {
            overEntityObj.incrementPos(evt.getPoint(), center, scale, (int) incx, (int) incy);
        }
        mouseStart = evt.getPoint();
        Application.get().updateEntityProperties();
        repaint();
    }//GEN-LAST:event_onDrag

    private void onPressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onPressed
        mouseStart = evt.getPoint();
        setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
    }//GEN-LAST:event_onPressed

    private void onReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onReleased
        setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_onReleased

    private void onMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onMoved
        overEntity = false;
        for (Entity e : entities) {
            if (e.isMouseOver(evt.getPoint(), center, scale)) {
                setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
                overEntity = true;
                overEntityObj = e;
            }
        }
        if (!overEntity) {
            setCursor(Cursor.getDefaultCursor());
        }
        repaint();
    }//GEN-LAST:event_onMoved

    private void onWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_onWheelMoved
        if (scale + evt.getWheelRotation() * 0.1f > 0.2f) {
            scale += evt.getWheelRotation() * 0.1f;
        }
        repaint();
    }//GEN-LAST:event_onWheelMoved

    private void onClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onClicked

        boolean found = false;
        selectedEntity = null;
        for (Entity e : entities) {
            e.setSelected(false);
            if (e.isMouseOver(evt.getPoint(), center, scale) && !found) {
                selectedEntity = e;
                e.setSelected(true);
                found = true;
            }
        }
        if (selectionChangedListener != null) {
            selectionChangedListener.selectionChanged(selectedEntity);
        }
        if (evt.getButton() == MouseEvent.BUTTON3 && selectedEntity != null) {
            EntityPopupMenu popup = new EntityPopupMenu(selectedEntity);
            popup.init();
            popup.show(this, evt.getX(), evt.getY());
        }
        repaint();
    }//GEN-LAST:event_onClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void paintGrid(Graphics2D g2d, int width, int height) {
        for (int x = (int) ((center.x % gridSize) * scale); x < width; x += gridSize * scale) {
            g2d.drawLine(x, 0, x, height);
        }
        
        for (int y = (int) ((center.y % gridSize) * scale); y < width; y += gridSize * scale) {
            g2d.drawLine(0, y, width, y);
        }
    }
    
    public void addEntity(Sprite b) {
        Entity e = new Entity(b, (int) (-center.x + 100 / scale), (int) (-center.y + 100 / scale));
        Application.get().addEntity(e);
        repaint();
    }

    public SelectionChangedListener getSelectionChangedListener() {
        return selectionChangedListener;
    }

    public void setSelectionChangedListener(SelectionChangedListener selectionChangedListener) {
        this.selectionChangedListener = selectionChangedListener;
    }

    public void setSelectedEntityIndex(int selectedIndex) {
        Entity e = Application.get().getEntityHolder().get(selectedIndex);
        selectedEntity = e;
        for (Entity b : entities) {
            b.setSelected(false);
        }
        e.setSelected(true);
        repaint();
    }
    
    public Entity getSelectedEntity() {
        return selectedEntity;
    }
    
    public LevelProperties getLevelProperties() {
        return levelProperties;
    }
}
